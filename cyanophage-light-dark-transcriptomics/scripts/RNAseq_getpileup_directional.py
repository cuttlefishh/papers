#!/usr/bin/env python

'''
Steve Biller, March 2011

Usage: RNAseq_getpileup_directional.py

Goal: Get a pileup file for a given SAM/BAM file that can be brought into R, etc

Output: Chromosome, position, # reads mapping to + strand, # reads mapping to - strand

'''

import sys, re, pysam, os
from optparse import OptionParser
from operator import itemgetter


def check_files(samname,reference_length_list):
    #This function verifies that the binary indexed BAM files exist (or will generate them if needed)
    #Returns the name of the sorted bam file to be used for read counting
    
    #To do this searching efficiently, we need to use a sorted, indexed file in BAM format... check if it's there already, if not, call samtools to make them
    #depends on this naming scheme: for file 'aln', would be aln.sam -> aln.bam -> aln-sorted.bam
    
    basename = samname[0:-4]
    bamname = basename+".bam"
    if not os.path.isfile(bamname):
        print "Converting SAM file to BAM format"
        callstring = "samtools view -bS -o %s %s" % (bamname,samname)
        os.system(callstring)
                  
    sortedname = basename+"-sorted.bam"
                  
    if not os.path.isfile(basename+"-sorted.bam"):
        print "Sorting and indexing BAM file"
        os.system("samtools sort %s %s" % (bamname,basename+"-sorted"))
        os.system("samtools index %s" % (basename+"-sorted.bam"))

    return basename+"-sorted.bam"

def collect_data(chromosome_name,reference_length,output_handle):
    #Main function for going through a list of region identifiers, counting the number of reads mapped, and outputting this to a file

    for pileupcolumn in samfile.pileup(chromosome_name,1,reference_length):
        #For each position in genome, need to go through list of mapped reads and figure out direction of each
        readlist = pileupcolumn.pileups

        plustotal=0
        minustotal=0

        #Use the built-in class method to figure out strand... may not be fastest way to do this
        for read in readlist:
            if(read.alignment.is_reverse):
                minustotal+=1
            else:
                plustotal+=1

        output_handle.write("%s\t%d\t%d\t%d\n" % (chromosome_name, pileupcolumn.pos, plustotal, minustotal))

def check_sam_header(infile):
    #Go through header of SAM file and parse out the genome reference name and the length of that genome
    #Returns a list with tuples of (name,length) pairs in case multiple references are submitted
    #In SAM format, SN defines reference seq name, LN is length; this has been tested with SAM files generated by BWA only
    
    reference_length_list = list()
    samhandle=open(infile,"rU")
    
    for line in samhandle:
        if ("@SQ" in line): #header line
            m = re.search("SN:(.+?)\s",line)
            n = re.search("LN:(\d+?)\s",line)
            name = m.group(1)
            n = int(n.group(1))
            reference_length_list.append((name,n))
        else:
            break

    samhandle.close()
    return reference_length_list

if __name__ == "__main__":
    #Main program loop
    
    usage="Usage: RNAseq_getpileup_directional.py -i <input SAM-formatted alignment file> -o <output>\n"

    #Check that all options have been passed
    if not len(sys.argv)== 5:
        sys.exit("Error: not all arguments specified\n"+usage)
            
    parser = OptionParser(usage)
    parser.add_option("-i",dest="infile_sam",help="input SAM-formatted alignment file")
    parser.add_option("-o",dest="outfile",help="output file name")
    (options, args) = parser.parse_args()

    #Output
    output_handle = open(options.outfile, "w")

    #check header of sam file
    #get length of reference sequence for determining intergenics
    reference_length_list=check_sam_header(options.infile_sam)

    #check to see if BAM indexed files exist, otherwise make them; also verify that genome table files exist before we begin processing
    bamfilename = check_files(options.infile_sam,reference_length_list)
    
    #create samfile object for all of the read counting... global
    samfile = pysam.Samfile(bamfilename, 'rb')

    #main loop for counting reads mapping to each reference chromosome in file
    for items in reference_length_list:
        reference_length = items[1]
        chromosome_name = items[0]
        print "Generating pileup for reference sequence %s..." %(chromosome_name)

        #count and generate output
        collect_data(chromosome_name,reference_length,output_handle)
  
    output_handle.close()
    print "Done"
    
